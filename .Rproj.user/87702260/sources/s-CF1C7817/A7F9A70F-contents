bootSeparableEffects <- function(inputSeparable){
  
  inputSeparable$bootno <- 1:dim(inputSeparable)[1]
  longProstRed <- survSplit(data=inputSeparable,cut=cutTimes,start="Tstart",end="dtime",event="allCause")
  longProstRedCens <- survSplit(data=inputSeparable,cut=cutTimes,start="Tstart",end="dtime",event="eventCens")
  longProstRed$eventCens <- longProstRedCens$eventCens
  # Make column for prostate cancer mortality
  longProstRed$prostateDeath <- longProstRed$allCause==1 & longProstRed$eventType==1
  longProstRed$otherDeath <- longProstRed$allCause==1 & longProstRed$eventType==2
  
  # Sample size 
  n <- length(unique(longProstRed$bootno))
  
  # Create 'baseline' - data collected at visit 0
  baseline <- longProstRed[longProstRed$dtime==0,]
  
  # Data processing: create powers of time to allow time dependent baseline hazard
  longProstRed$dtime2 <- longProstRed$dtime * longProstRed$dtime
  longProstRed$dtime3 <- longProstRed$dtime2 * longProstRed$dtime
  longProstRed$dtime4 <- longProstRed$dtime3 * longProstRed$dtime
  
  
  # Data processing: create time dependent coefficients for the hazard of prostate death
  longProstRed$rx1 <- longProstRed$dtime * longProstRed$rx
  longProstRed$rx2 <- longProstRed$dtime2 * longProstRed$rx
  longProstRed$rx3 <- longProstRed$dtime3 * longProstRed$rx
  longProstRed$rx4 <- longProstRed$dtime4 * longProstRed$rx
  
  # Data processing: Make copies of rx to be used in the hazard of other death
  longProstRed$Orx <- longProstRed$rx 
  longProstRed$Orx1 <- longProstRed$rx1 
  longProstRed$Orx2 <- longProstRed$rx2 
  longProstRed$Orx3 <- longProstRed$rx3 
  longProstRed$Orx4 <- longProstRed$rx4 
  
  plrFitP <- glm(prostateDeath ~ dtime + dtime2 + dtime3 + normalAct+ageCat+hx+hgBinary 
                 + rx + rx1 + rx2 , data = longProstRed,family=binomial())
  plrFitO <- glm(otherDeath ~ dtime + dtime2 + dtime3  + normalAct+ageCat+hx+hgBinary 
                 + Orx + Orx1 + Orx2 , data = longProstRed,family=binomial())
  # Step 3. Create simulated data where everyone is treated
  # Expand baseline so it contains a visit at each time point for every individual
  # where the baseline information has been carried forward at each time
  treated <- baseline[rep(1:n,each=length(cutTimes)),] #One row for each time
  treated$dtime <- rep(cutTimes,n)
  treated$rx <-0
  treated$Orx <- 0
  # Re-create the additional interaction terms. 
  treated$dtime2 <- treated$dtime * treated$dtime; 
  treated$dtime3 <- treated$dtime2 * treated$dtime
  treated$dtime4 <- treated$dtime3 * treated$dtime
  
  treated$rx1 <- treated$dtime * treated$rx
  treated$rx2 <- treated$dtime2 * treated$rx
  treated$rx3 <- treated$dtime3 * treated$rx
  treated$rx4 <- treated$dtime4 * treated$rx
  
  treated$Orx1 <- treated$dtime * treated$Orx
  treated$Orx2 <- treated$dtime2 * treated$Orx
  treated$Orx3 <- treated$dtime3 * treated$Orx
  treated$Orx4 <- treated$dtime4 * treated$Orx
  
  # Turn into conditional risk of event in each time interval
  treated$hazardP <- predict(plrFitP, newdata = treated, type = 'response') 
  treated$hazardO <- predict(plrFitO, newdata = treated, type = 'response')
  treated$s <- (1-treated$hazardP) * (1-treated$hazardO)
  sum(treated$hazardO < 0)
  
  
  # Make analogous dataset for placebo
  placebo <- baseline[rep(1:n,each=length(cutTimes)),] #One row for each time
  placebo$dtime <- rep(cutTimes,n)
  placebo$rx <- 1
  placebo$Orx <- 1
  # Re-create the additional interaction terms. 
  placebo$dtime2 <- placebo$dtime * placebo$dtime; 
  placebo$dtime3 <- placebo$dtime2 * placebo$dtime
  placebo$dtime4 <- placebo$dtime3 * placebo$dtime
  
  placebo$rx1 <- placebo$dtime * placebo$rx
  placebo$rx2 <- placebo$dtime2 * placebo$rx
  placebo$rx3 <- placebo$dtime3 * placebo$rx
  placebo$rx4 <- placebo$dtime4 * placebo$rx
  
  placebo$Orx1 <- placebo$dtime * placebo$Orx
  placebo$Orx2 <- placebo$dtime2 * placebo$Orx
  placebo$Orx3 <- placebo$dtime3 * placebo$Orx
  placebo$Orx4 <- placebo$dtime4 * placebo$Orx
  
  # Turn into conditional risk of event in each time interval
  placebo$hazardP <- predict(plrFitP, newdata = placebo, type = 'response') 
  placebo$hazardO <- predict(plrFitO, newdata = placebo, type = 'response')
  placebo$s <- (1-placebo$hazardP) * (1-placebo$hazardO)
  
  
  # Make analogous dataset for Ay=0,Ad=1
  treatAy <- baseline[rep(1:n,each=length(cutTimes)),] #One row for each time
  treatAy$dtime <- rep(cutTimes,n)
  treatAy$rx <- 0
  treatAy$Orx <- 1
  # Re-create the additional interaction terms. 
  treatAy$dtime2 <- treatAy$dtime * treatAy$dtime; 
  treatAy$dtime3 <- treatAy$dtime2 * treatAy$dtime
  treatAy$dtime4 <- treatAy$dtime3 * treatAy$dtime
  
  treatAy$rx1 <- treatAy$dtime * treatAy$rx
  treatAy$rx2 <- treatAy$dtime2 * treatAy$rx
  treatAy$rx3 <- treatAy$dtime3 * treatAy$rx
  treatAy$rx4 <- treatAy$dtime4 * treatAy$rx
  
  treatAy$Orx1 <- treatAy$dtime * treatAy$Orx
  treatAy$Orx2 <- treatAy$dtime2 * treatAy$Orx
  treatAy$Orx3 <- treatAy$dtime3 * treatAy$Orx
  treatAy$Orx4 <- treatAy$dtime4 * treatAy$Orx
  
  # Turn into conditional risk of event in each time interval
  treatAy$hazardP <- predict(plrFitP, newdata = treatAy, type = 'response') 
  treatAy$hazardO <- predict(plrFitO, newdata = treatAy, type = 'response')
  treatAy$s <- (1-treatAy$hazardP) * (1-treatAy$hazardO)
  
  cumIncTreated <- calculateCumIncBoot(treated)
  cumIncTreatAy <- calculateCumIncBoot(treatAy)
  cumIncPlacebo <- calculateCumIncBoot(placebo)
  return(data.frame(cumIncTreated,cumIncTreatAy,cumIncPlacebo))
}
