### Import data
getwd()
# setwd("/Users/stensrud/Dropbox/statistikk/r scripts/truncation by death sace/Re__prostate_cancer_dataset/")
pr_outcomes <- read.delim("data1.txt")
pr_input <- read.delim("data2.txt")
pr_gqol <- read.delim("GQOL.txt")
# summary(pr_input$SURIND[]==0)
# str(pr_gqol); str(pr_outcomes); 
# table(pr_gqol$ISURV, pr_gqol$DSCORE12)

###########################################################
##### DATA HANDLING 
###########################################################

# Some descriptions of pr_input: Lev 1 is prognosis, Lev 2 is bone pain, Lev3 is performance status
# Z=0 is MP, and Z=1 is DE,
# ISURV equal to 4 is an indicator of being alive at end of follow-up (12 months), because of the row on the next line:
# summary(pr_gqol$DSCORE12[pr_gqol$ISURV != 4])
# pr_input$TRNO has values 1 (DE) and 2 (MP), verified by: 
# table(pr_input$TRNO, pr_input$ARMNAME)

# Different number of rows/individuals in the input data frames.
# 487 subjects in pr_gqol, 650 subjects in pr_input, 621 in pr_outcomes
# We continue to use the same data as in Wang et al and Ding et al. 

# all subjects in pr_gqol are also in pr_input and pr_outcomes, as verified below: 
# Create matching variables to match the different datasets. 
match_input <- match(pr_gqol$PATNO,pr_input$PATNO)
match_outcomes <- match(pr_gqol$PATNO,pr_outcomes$PATNO) # summary(match_outcomes)
match_in_out <- match(pr_outcomes$PATNO,pr_input$PATNO)

# To see this, there is one individual who probably has ISURV miscoded as 3, which should be 4.  
# Thus, we have changed the ISURV variable to 4 for this individual. 
# which(!is.na(pr_gqol$ABS_SCORE12) &is.na(pr_gqol$DSCORE12))
# pr_gqol[380,]


# Create new variables in pr_gqol


# Create absolute value of quality of life at end of follow-up
pr_gqol$ABS_SCORE12 <- pr_outcomes$score12[match_outcomes]

# Create absolute value of quality of life at the beginning of follow-up
pr_gqol$ABS_SCORE0 <- pr_outcomes$score0[match_outcomes]

# Create an indicator of survival, such that 1 means alive (survive) and 0 means not dead (not survived). 
pr_gqol$SURV12 <- pr_gqol$ISURV==4 
# Changed indicator PATNO 180028, who has measurement of SCORE12 and thus has to be alive. 
pr_gqol$SURV12[pr_gqol$PATNO==180028] <- TRUE

# Create a variable for the difference in quality of life between time 0 and 12 months
pr_gqol$DIFF_ABS <- pr_gqol$ABS_SCORE12 - pr_gqol$ABS_SCORE0

# table(is.na(pr_gqol$DIFF_ABS),is.na(pr_gqol$DSCORE12)). 

# Create a variable that defines missing values of outcome. 
pr_gqol$cens_DIFF_ABS <- is.na(pr_gqol$DIFF_ABS)

# Create indicator of disease progression before 12 months.
pr_input$progress_12m <- pr_input$PRGREL=="Y" & pr_input$pfstim < 365 

# Add progress_12m to pr_gqol (for convenience, in regressions later)
pr_gqol$progress_12m <- pr_input$progress_12m[match_input]

###########################################################
###### Sanity check of the variables in the data set. 
###########################################################

# To check that pr_input$PRGREL actually indicates progression during follow-up
# table(pr_input$PRGREL, pr_input$pfsind)
# Check times to progression, and that these times are for progression (not death), that is, 
# coded as censoring: 
summary(pr_input$pfstim[pr_input$PRGREL=="Y"])
summary(pr_input$pfstim[pr_input$PRGREL=="Y"] <= pr_input$SURTIM[pr_input$PRGREL=="Y"])

# Of those surviving 12 months (368 subjects), 152 had missing values for quality of life. 
summary(pr_gqol$SURV12 & is.na(pr_gqol$DSCORE12))

###########################################################
###### Naive models.
###########################################################

# The LM used to reproduce the results in Wang et al: 
simple_lm <- lm(DIFF_ABS~Z+ABS_SCORE0+RACEB+AGE+LEV1+LEV2+LEV3, data = pr_gqol)
summary(simple_lm)

# The next one is almost identical, but includes one less individual (this individual has missing survival)
simple_lm2 <- lm(DIFF_ABS~Z+ABS_SCORE0+RACEB+AGE+LEV1+LEV2+LEV3, data = pr_gqol[pr_gqol$ISURV==4,])
summary(simple_lm2)


############################################
##### Calculate causal effect on survival.
############################################

#sum(pr_gqol$SURV12)

surv12_Z0 <- pr_gqol$SURV12[pr_gqol$Z==0]
surv12_Z1 <- pr_gqol$SURV12[pr_gqol$Z==1]

mean_surv_Z0 <- mean(pr_gqol$SURV12[pr_gqol$Z==0])
con_surv_Z0 <- binom.test(sum(surv12_Z0),length(surv12_Z0))
round(con_surv_Z0$conf.int,2)

mean_surv_Z1 <- mean(pr_gqol$SURV12[pr_gqol$Z==1])
con_surv_Z1 <- binom.test(sum(surv12_Z1),length(surv12_Z1))
round(con_surv_Z1$conf.int,2)

surv_tab <- rbind(table(!surv12_Z0),table(!surv12_Z1))
surv_diff <- prop.test(surv_tab)
round(surv_diff$conf.int,2)

#####################################################
##### Code with function that returns estimands of interest
#####################################################

# Calculate Survivor separable effect through weighting. Returns counterfactual Y under Z=1=DE, Z=0=MP, 
get_sse_estimator <- function(input_dataset=pr_gqol){
  # Create indices of being treated, surviving and having ABS_SCORE12 measured
  index_DE <- input_dataset$Z==1 & input_dataset$SURV12==TRUE & !is.na(input_dataset$ABS_SCORE12)
  index_MP <- input_dataset$Z==0 & input_dataset$SURV12==TRUE & !is.na(input_dataset$ABS_SCORE12)
  
  # Step 1. Create a weight model, indicating survival with- and without treatment. 
  # To do this, we can use the pr_gqol (i.e. input dataset) data.
  
  # Create inverse probability of censoring weights 
  lr_fit_cens <- glm(cens_DIFF_ABS ~ ABS_SCORE0 + RACEB + AGE + LEV1 + LEV2 + LEV3 + progress_12m + Z, data = input_dataset[input_dataset$SURV12==1,], family = binomial() ) 
  
  # Create separate models in the two treatment arms, full isolation  
  lr_fit_death_MP <- glm(SURV12 ~  ABS_SCORE0 + RACEB + AGE + LEV1 + LEV2 + LEV3, data = input_dataset[input_dataset$Z==0,], family = binomial() ) 
  lr_fit_death_DE <- glm(SURV12 ~  ABS_SCORE0 + RACEB + AGE + LEV1 + LEV2 + LEV3, data = input_dataset[input_dataset$Z==1,], family = binomial() ) 
  
  # Create similar models for the case of Ay partial isolation
  lr_fit_death_MP_ay <- glm(SURV12 ~  ABS_SCORE0 + RACEB + AGE + LEV1 + LEV2 + LEV3 + progress_12m, data = input_dataset[input_dataset$Z==0,], family = binomial() ) 
  lr_fit_death_DE_ay <- glm(SURV12 ~  ABS_SCORE0 + RACEB + AGE + LEV1 + LEV2 + LEV3 + progress_12m, data = input_dataset[input_dataset$Z==1,], family = binomial() ) 
  
  # Create models to calculate the weights for the covariate process L_k 
  lr_fit_progression_MP_ay <- glm(progress_12m ~  ABS_SCORE0 + RACEB + AGE + LEV1 + LEV2 + LEV3, data = input_dataset[input_dataset$Z==0,], family = binomial() ) 
  lr_fit_progression_DE_ay <- glm(progress_12m ~  ABS_SCORE0 + RACEB + AGE + LEV1 + LEV2 + LEV3, data = input_dataset[input_dataset$Z==1,], family = binomial() ) 
  
  # Predict from the models, which is the next step in obtaining weights.
  pred_cens <- 1-predict(lr_fit_cens, newdata = input_dataset, type = 'response')
  
  pred_death_MP <- predict(lr_fit_death_MP, newdata = input_dataset, type = 'response')
  pred_death_DE <- predict(lr_fit_death_DE, newdata = input_dataset, type = 'response')
  
  pred_death_MP_ay <- predict(lr_fit_death_MP_ay, newdata = input_dataset, type = 'response')
  pred_death_DE_ay <- predict(lr_fit_death_DE_ay, newdata = input_dataset, type = 'response')
  
  pred_progression_MP_ay <- predict(lr_fit_progression_MP_ay, newdata = input_dataset, type = 'response')
  pred_progression_DE_ay <- predict(lr_fit_progression_DE_ay, newdata = input_dataset, type = 'response')
  
  # Strategy: Weigh subjects in MP arm with weights DE/MP to find Ay=MP, Ad=DE. 
  # This will be a non-parametric analysis.
  
  weights_full_iso <- 1/pred_cens * pred_death_DE / pred_death_MP 
  # Remember the L contribution to the weights here. 
  weights_ay_iso <- 1/pred_cens * pred_death_DE_ay / pred_death_MP_ay * (input_dataset$progress_12m*(pred_progression_DE_ay / pred_progression_MP_ay)
                                                                         + !input_dataset$progress_12m*((1-pred_progression_DE_ay) / (1-pred_progression_MP_ay))
                                                                         )
  # Create average outcomes under the hypothetical treatment Ay=MP, Ad=DE (NB: Z=0 if MP, Z=1 DE)
  outcomes_hypo_full_iso <- weights_full_iso[index_MP] * input_dataset$ABS_SCORE12[index_MP] 
  outcomes_hypo_ay_iso <- weights_ay_iso[index_MP] * input_dataset$ABS_SCORE12[index_MP] 
  outcomes_MP <- input_dataset$ABS_SCORE12[index_MP]
  outcomes_DE <- input_dataset$ABS_SCORE12[index_DE]
  mean_outcomes_DE <- mean(outcomes_DE)
  mean_outcomes_MP <- mean(outcomes_MP)
  mean_hypo_full_iso <- sum(outcomes_hypo_full_iso) / sum(weights_full_iso[index_DE])
  mean_hypo_ay_iso <- sum(outcomes_hypo_ay_iso) / sum(weights_ay_iso[index_DE])
  diff_hypo_ay_vs_DE <- mean_outcomes_DE-mean_hypo_ay_iso
  
  #### Make constrasts between (Ay=MP, Ad=DE) and A=DE
  # Change the outcome to DIFF_ABS, still under the hypothetical treatment Ay=MP, Ad=DE (NB: Z=0 if MP, Z=1 DE)
  outcomes_hypo_full_iso_dscore <- weights_full_iso[index_MP] * input_dataset$DIFF_ABS[index_MP] 
  outcomes_hypo_ay_iso_dscore <- weights_ay_iso[index_MP] * input_dataset$DIFF_ABS[index_MP] 
  outcomes_MP_dscore <- input_dataset$DIFF_ABS[index_MP]
  outcomes_DE_dscore <- input_dataset$DIFF_ABS[index_DE]
  mean_outcomes_DE_dscore <- mean(outcomes_DE_dscore)
  mean_outcomes_MP_dscore <- mean(outcomes_MP_dscore)
  mean_hypo_full_iso_dscore <- sum(outcomes_hypo_full_iso_dscore) / sum(weights_full_iso[index_DE])
  mean_hypo_ay_iso_dscore <- sum(outcomes_hypo_ay_iso_dscore) / sum(weights_ay_iso[index_DE])
  diff_hypo_ay_vs_DE_dscore <- mean_outcomes_DE_dscore-mean_hypo_ay_iso_dscore
  
  ###### Implement doubly robust estimator
  ## Then we also need to fit an outcome model. 
  
  ## Mean outcomes (absolute numbers)
  lr_fit_y_MP <- lm(ABS_SCORE12 ~  ABS_SCORE0 + RACEB + AGE + LEV1 + LEV2 + LEV3, data = input_dataset[input_dataset$Z==0 & input_dataset$SURV12==1,] ) 
  lr_fit_y_DE <- lm(ABS_SCORE12 ~  ABS_SCORE0 + RACEB + AGE + LEV1 + LEV2 + LEV3, data = input_dataset[input_dataset$Z==1 & input_dataset$SURV12==1,] ) 
  
  pred_y_MP <- predict(lr_fit_y_MP, newdata = input_dataset, type = 'response')
  pred_y_DE <- predict(lr_fit_y_DE, newdata = input_dataset, type = 'response')
  
  
  ## Mean outcomes (dscore numbers, that is, difference)
  lr_fit_y_MP_dscore <- lm(DSCORE12 ~  ABS_SCORE0 + RACEB + AGE + LEV1 + LEV2 + LEV3, data = input_dataset[input_dataset$Z==0 & input_dataset$SURV12==1,] ) 
  lr_fit_y_DE_dscore <- lm(DSCORE12 ~  ABS_SCORE0 + RACEB + AGE + LEV1 + LEV2 + LEV3, data = input_dataset[input_dataset$Z==1 & input_dataset$SURV12==1,] ) 
  
  pred_y_MP_dscore <- predict(lr_fit_y_MP_dscore, newdata = input_dataset, type = 'response')
  pred_y_DE_dscore <- predict(lr_fit_y_DE_dscore, newdata = input_dataset, type = 'response')
  
  # Create some extra parameters for the doubly roubst estimator
  p_DE <- mean(input_dataset$Z)
  p_death_DE <- 1-mean(input_dataset$SURV12[input_dataset$Z==1])
  n <- dim(input_dataset)[1]
  
  # Create a data frame, first to calculate the absolute value of the QOL outcome.
  input_to_dr <- data.frame(beta=rep(1-p_death_DE,times=n),iAd=input_dataset$Z,d=(1-input_dataset$SURV12),c=as.integer(input_dataset$cens_DIFF_ABS), y=input_dataset$ABS_SCORE12,
                       eYy=pred_y_MP,eYd=pred_y_DE,ipw=weights_ay_iso,pAd=p_DE)
  input_to_dr$y[is.na(input_to_dr$y)] <- 0
  output_from_dr <- apply(input_to_dr,1, function(x) doubly_robust(x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],x[9]))
  
  # Change the data frame to include the difference in QOL
  input_to_dr_dscore <- data.frame(beta=rep(1-p_death_DE,times=n),iAd=input_dataset$Z,d=(1-input_dataset$SURV12),c=as.integer(input_dataset$cens_DIFF_ABS), y=input_dataset$DSCORE12,
                                   eYy=pred_y_MP_dscore,eYd=pred_y_DE_dscore,ipw=weights_ay_iso,pAd=p_DE)
  input_to_dr_dscore$y[is.na(input_to_dr_dscore$y)] <- 0
  output_from_dr_dscore <- apply(input_to_dr_dscore,1, function(x) doubly_robust(x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],x[9]))
  
  mean_hypo_ay_dr <- sum(output_from_dr)/n
  mean_hypo_ay_dr_dscore <- sum(output_from_dr_dscore)/n
  diff_hypo_ay_vs_DE_dr_dscore <- mean_outcomes_DE_dscore-mean_hypo_ay_dr_dscore
  
  ####################
  ##### DR done ######
  ####################
  
  return(c(mean_outcomes_DE_dscore,mean_outcomes_MP_dscore,mean_hypo_full_iso_dscore,mean_hypo_ay_iso_dscore,diff_hypo_ay_vs_DE_dscore,
           mean_outcomes_DE,mean_outcomes_MP,mean_hypo_full_iso,mean_hypo_ay_iso,diff_hypo_ay_vs_DE,mean_hypo_ay_dr,mean_hypo_ay_dr_dscore,diff_hypo_ay_vs_DE_dr_dscore))
}
get_sse_estimator(pr_gqol)
dim(pr_gqol)

# Doubly robust estimator. Note that ipw is the 
doubly_robust <- function(beta, iAd, d, c,y, eYy,eYd,ipw,pAd){
  iAy <- 1-iAd
  pAy <- 1-pAd
  term_1 <- iAd/pAd * (1-d) * eYy
  term_2 <- iAy/pAy * ipw * (1-d) * (1-c)* (y - eYy)
  u_out <- 1/beta * (term_1 + term_2)
  return(u_out)
}


# Bootstrap function
bootstrap_sample <- function(in_data=pr_gqol){
  indiv <- 1:(length(in_data[,1]))
  boot_index <- sample(indiv,size = length(indiv), replace=T)
  boot_output <- get_sse_estimator(in_data[boot_index,])
  
  return(boot_output)
}
set.seed(1)
n_boot_samples=499
boot_sample_result <- replicate(n=n_boot_samples, bootstrap_sample(pr_gqol), simplify = T)
get_95_ci <- apply(boot_sample_result, MARGIN=1, quantile,probs=c(0.025,0.975))
get_point_estim <- get_sse_estimator(pr_gqol)
output_format <- round(t(rbind(get_point_estim,get_95_ci)),1)
library(xtable)
xtable(output_format)

#############################################################################################
#############################################################################################
# To verify the coding of 4, which seems to be approx correct
summary(pr_input$SURTIM[match_input] > 365);
sum(pr_gqol$ISURV==4)
# To confirm that nobody with ISURV=4 has valid measurements of SCORE12 or DIFF_ABS
sum(pr_gqol$ISURV!=4 & !is.na(pr_gqol$DIFF_ABS) )


# The two things below shows that how the outcome measure is made. Think this is nice to use.
patno_pr_outcomes <- pr_outcomes$PATNO[!is.na(pr_outcomes$score12-pr_outcomes$score0)]
patno_pr_gqol <- pr_gqol$PATNO[!is.na(pr_gqol$DIFF_ABS)]
match_patno <- match(patno_pr_gqol,patno_pr_outcomes)

############################################################################################


match3 <- match(pr_gqol$PATNO[pr_gqol$Z==1 & pr_gqol$ISURV==4],pr_outcomes$PATNO)
match4 <- match(pr_gqol$PATNO[pr_gqol$Z==0 & pr_gqol$ISURV==4],pr_outcomes$PATNO)
match5 <- match(pr_outcomes$PATNO,pr_input$PATNO)
str(pr_input)
pr_outcomes$TRNO <- pr_input$TRNO[match5]
mean(na.omit(pr_outcomes$score12[match3])) - mean(na.omit(pr_outcomes$score12[match4]))
mean(na.omit(pr_outcomes$dscore12[pr_outcomes$TRNO==1])) - mean(na.omit(pr_outcomes$dscore12[pr_outcomes$TRNO==2]))

# Check if the length of match3 and match4 are correct, i.e. covers everyone. 
length(na.omit(pr_outcomes$score12[match3])) + length(na.omit(pr_outcomes$score12[match4]))
summary(na.omit(pr_outcomes$score12[match3]))
summary(na.omit(pr_outcomes$score12[match4]))


sum(pr_gqol$ISURV==4)
length(na.omit(pr_gqol$DSCORE12))

# confirming that DSCORE12 is created as I think
pr_outcomes$dscore12 <- pr_outcomes$score12-pr_outcomes$score0
summary(na.omit(pr_outcomes$score12[match3]))
summary(na.omit(pr_outcomes$score12[match4]))
summary(na.omit(pr_outcomes$score0[match3]))
summary(na.omit(pr_outcomes$score0[match4]))

####################################################################################################################
####
#### probably not needed
####
match5 <- match(pr_outcomes$PATNO,pr_input$PATNO)
str(pr_gqol$PATNO[pr_gqol$Z==1 & pr_gqol$ISURV==4])

####
#### NOT EXACTLY SURE WHY I DID THE THINGS BELOW HERE
####
# Strategy
cbind(pr_input$SURIND[match2]==1 & pr_input$SURTIM[match2] > 365, pr_gqol$ISURV)[20:50,]
cbind(i=pr_gqol,pr_input$SURIND[match2], t=pr_input$SURTIM[match2])[1:50,]

summary(pr_gqol$DSCORE12[pr_gqol$ISURV==4])
str(pr_gqol)


mean(na.omit(pr_gqol$DSCORE12[pr_gqol$Z==1]))-mean(na.omit(pr_gqol$DSCORE12[pr_gqol$Z==0]))
mean(na.omit(pr_gqol$ABS_SCORE12[pr_gqol$Z==1]))-mean(na.omit(pr_gqol$ABS_SCORE12[pr_gqol$Z==0]))
